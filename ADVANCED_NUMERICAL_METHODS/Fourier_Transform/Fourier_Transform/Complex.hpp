#ifndef _COMPLEX_HPP_
#define _COMPLEX_HPP_
#pragma once

#include <iostream>
#include <windows.h>
#include <string>

namespace Complex
{

	using _STD cout;
	using _STD cin;
	using _STD endl;

	class Complex
	{
	private:
		//////////////////////////////////////////////////////////////////////////////
		/*
			ZMIENNE PRIVATE
		*/
		float Im;
		float Re;
		//////////////////////////////////////////////////////////////////////////////
	public:
		//////////////////////////////////////////////////////////////////////////////
		/*
			KONSTRUKTORY PUBLIC
		*/
		Complex();
		Complex(const float Im, const float Re);
		Complex(const Complex& Object);
		//////////////////////////////////////////////////////////////////////////////
		/*
			FUNKCJE PUBLIC
		*/
		void Print() const;
		//////////////////////////////////////////////////////////////////////////////
		/*
			SETTERY PUBLIC
		*/
		void Set_Im(const float Im);
		void Set_Re(const float Re);
		//////////////////////////////////////////////////////////////////////////////
		/*
			OPERATORY PUBLIC
		*/
		//JEDNOARGUMENTOWE
		Complex& operator=(const Complex& Object);
		//DWUARGUMENTOWE
		//////////////////////////////////////////////////////////////////////////////
		/*
			GETTERY PUBLIC
		*/
		float Get_Im() const;
		float Get_Re() const;
		//////////////////////////////////////////////////////////////////////////////
		/*
			DESTRUKTOR
		*/
		virtual ~Complex();
	};

}

#endif /* _COMPLEX_HPP_ */ 