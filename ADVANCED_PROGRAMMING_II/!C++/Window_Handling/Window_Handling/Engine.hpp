/*
 *			   Copyright (c) by Damian Andrysiak. All rights reserved.
 *							Greetings for everyone!
*/
#ifndef _ENGINE_HPP_
#define _ENGINE_HPP_
#define NEW_LINE '\n'

#include <iostream>
#include <memory>
#include <vector>
#include <thread>
#include <functional>
#include <windows.h>
#include <string.h>

#include <locale>
#include <codecvt>



#include "Detect_Window.hpp"

namespace Engine
{

	class Engine
	{
	private:
		//////////////////////////////////////////////////////////////////////////////
		/*
			ZMIENNE PRIVATE
		*/
		Window::Detect_Window Detect_Window_Object;
		//////////////////////////////////////////////////////////////////////////////		//////////////////////////////////////////////////////////////////////////////
		/*
			FUNKCJE PRIVATE
		*/

		//////////////////////////////////////////////////////////////////////////////
	public:
		//////////////////////////////////////////////////////////////////////////////
		/*
			KONSTRUKTORY PUBLIC
		*/
		Engine();
		//Engine(const Engine & Object);
		//////////////////////////////////////////////////////////////////////////////
		/*
			FUNKCJE PUBLIC
		*/
		void Start_Monitoring();
		void Print() const;
		//////////////////////////////////////////////////////////////////////////////
		/*
			SETTERY PUBLIC
		*/

		//////////////////////////////////////////////////////////////////////////////
		/*
			OPERATORY PUBLIC
		*/
		//JEDNOARGUMENTOWE
		//Engine& operator=(const Engine& Object);
		//DWUARGUMENTOWE
		//////////////////////////////////////////////////////////////////////////////
		/*
			GETTERY PUBLIC
		*/

		//////////////////////////////////////////////////////////////////////////////
		/*
			DESTRUKTOR
		*/
		virtual ~Engine();
	};

}

#endif /* _ENGINE_HPP_ */