// Parser_H_ standard header
/*
 *			   Copyright (c) by Damian Andrysiak. All rights reserved.
 *							*** WERSJA FINALNA ***
 *						  *** Koniec: 04/01/2019 ***
 *							Klasa ma za zadanie:
 *	1. Zamiane i zwrocenie nam podzielonego stringa ktorego bedziemy
 *	   w stanie przypisac do innego stringa badz inta itp.
*/
#ifndef Parser_H_
#define Parser_H_
/*
	OUTSIDE FILES .h / .hpp
*/

//////////////////////////////////////
#include <iostream>
#include <string>

class Parser
{
private:
	/*
		ZMIENNE PRIVATE
	*/
	std::string m_to_parse;										//zmienne ktora musimy zamienic na rzadana wartosc
	std::string to_return;										//zmienne przekonwertowana ktora zwracamy jako wynik
	int counter;												//licznik operacji
	std::string::const_iterator m_to_parse_iter;				//staly iterator m_to_parse
	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PRIVATE
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PRIVATE
	*/
	//JEDNOARGUMENTOWE

	//////////////////////////////////////////////////////////////////////////////
protected:
	/*
		ZMIENNE PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PROTECTED
	*/


	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PROTECTED
	*/
	
	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PROTECTED
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PROTECTED
	*/
	//JEDNOARGUMENTOWE

	//////////////////////////////////////////////////////////////////////////////
public:
	/*
		ZMIENNE PUBLIC
	*/

	//////////////////////////////////////////////////////////////////////////////
	/*
		KONSTRUKTORY PUBLIC
	*/
	Parser();													//konstruktor bezparametrowy	
	explicit Parser(const std::string & to_parse);				//konstruktor z jednym parametrem
	explicit Parser(const Parser & Object);						//konstruktor kopiujacy(wylaczony z uzytkowania)
	//////////////////////////////////////////////////////////////////////////////
	/*
		FUNKCJE PUBLIC
	*/
	const std::string & Parse_String();						//funkcja ktora parsuje nam stringa
	const int amout_of_operations();						//funkcja zwracajca ile operacji (ile spacji) musi wykonac parse string 
	//////////////////////////////////////////////////////////////////////////////
	/*
		SETTERY PUBLIC
	*/
	
	//////////////////////////////////////////////////////////////////////////////
	/*
		GETTERY PUBLIC
	*/
	const std::string & get_m_to_parse(void) const;						//getter zmiennej m_to_parse
	const std::string & get_to_return(void) const;						//getter zmiennej to_return
	//////////////////////////////////////////////////////////////////////////////
	/*
		OPERATORY PUBLIC
	*/
	//JEDNOARGUMENTOWE
	Parser & operator=(const Parser & Object);					//operator przypisania
	//////////////////////////////////////////////////////////////////////////////
	/*
		DESTRUKTOR
	*/
	virtual ~Parser();					//wirtualny destruktor
	//////////////////////////////////////////////////////////////////////////////
};

#endif /* Parser_H_ */