using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

namespace Horse_Race
{
    class Horse
    {

		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PRIVATE VARIABLES
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////
		String horse_name;
		Int32 speed;
		Int32 position;
		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PRIVATE CONSTRUCTORS
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////
		private Horse(String name, Int32 speed, Int32 position)
		{
			this.horse_name = name;
			this.speed = speed;
			this.position = position;
		}
		/////////////////////////////////////////////////////////////////////////////////////////////

		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC CONSTRUCTORS
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////
		public Horse()
		{
			this.horse_name = "Henry";
			this.speed = 2;
			this.position = 0;
		}

		public Horse(String name, Int32 speed)
		{
			this.horse_name = name;
			this.speed = speed;
			this.position = 0;
		}
		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC SETTERS
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC FUNCTIONS
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////
		public void Print()
		{
			Console.WriteLine("Name | {0} | Speed: {1}", this.horse_name, this.speed);
		}

		public void Run(object Position_Locker)
		{
			while(true)
			{
				lock(Position_Locker)
				{
					this.position += this.speed;
				}
				Thread.Sleep(500);
			}
		}
		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC OPERATORS
		*/
		//UNARY
		public static Horse operator ++(Horse horse)
		{
			//if (ReferenceEquals(horse, null))
			//{
			//	throw new ArgumentNullException("x");
			//}
			Horse new_horse = new Horse(horse.Horse_Name, horse.speed, horse.position + horse.speed);
			horse.position += horse.speed;
			return new_horse;
		}
		//BINARY

		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC GETTERS
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////

		/////////////////////////////////////////////////////////////////////////////////////////////
		/*
			PUBLIC PROPERTIES
		*/
		/////////////////////////////////////////////////////////////////////////////////////////////
		public String Horse_Name
		{
			get
			{
				return this.horse_name;
			}
			set
			{
				this.horse_name = value;
			}
		}
		public Int32 Speed
		{
			get
			{
				return this.speed;
			}
			set
			{
				this.speed = value;
			}
		}
		public Int32 Position
		{
			get
			{
				return this.position;
			}
			set
			{
				this.position = value;
			}
		}

		/////////////////////////////////////////////////////////////////////////////////////////////
	}
}
